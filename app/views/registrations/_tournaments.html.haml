- if @registration.tournaments.any?

  - mnh = Tournament.model_name.human
  - mnhp = mnh.pluralize

  %h3= mnhp

  - @registration.tournaments.each do |t|
    - checked = @registration.tournament_selections.include?(t.id)

    %div.tournament-registration
      %div.name
        %label
          %h4 
            = check_box_tag "tournaments_#{t.id}", t.id, checked, :name => 'tournament_ids[]'
            = t.name

      %div.information
        - if t.online?
          %div.server
            %p.heading Server
            %p
              = t.server_name
              %br
              = f.text_field :"username_#{t.server}", { :id => nil, :class => "registration_username_#{t.server}", :placeholder => "username", :'data-lpignore' => "true", :autocomplete => "off"}
        

        %div.location
          %p.heading Location
          %p
            = t.location

        %div.eligible
          %p.heading Eligibility
          %p
            = t.eligible

        %div.directors
          %p.heading Director(s)
          %p
            = t.directors

      %div.description
        = markdown(t.description).html_safe

  :javascript
    // Extract the server name from a string like this: registration[username_ogs]
    const serverRegex = /_([a-z]*)/;

    // Link inputs for the same servers together, so that when you fill out one it syncs all the others
    const usernameInputs = document.querySelectorAll("[class^='registration_username']");

    const onValid = (input, statusElement, message = 'Username found &check;') => {
      input.classList.remove('invalid');
      input.classList.add('valid');
      statusElement.innerHTML = message;
    }

    const onInvalid = (input, statusElement, message = 'Username not found.') => {
      input.classList.add('invalid');
      statusElement.innerHTML = message;
    }

    const onServiceUnavailable = (input, statusElement, message = '') => {
      input.classList.add('unavailable');
      statusElement.innerHTML = message;
    }

    const onStop = (input, statusElement) => {
      input.classList.remove('valid', 'invalid');
      statusElement.remove();
    }

    const validateUsername = async event => {
      // Deactivate validation for KGS. Currently, it throttles repeated
      // requests too aggressively for this feature to work consistently.
      if (event.target.classList.contains('registration_username_kgs')) {
        return;
      }

      // Don't try to to validate a username if the service has come back
      // unavailable
      if (event.target.classList.contains('unavailable')) {
        return;
      }

      // Reset the input's validation state
      event.target.classList.remove('valid', 'invalid');

      const { 1: server } = event.target.name.match(serverRegex);
      const username = event.target.value;

      // Get or create a validationStatus element
      let validationStatus = event.target.nextElementSibling;
      if (!validationStatus?.classList?.contains('validation-status')) {
        validationStatus = document.createElement('div');
        validationStatus.classList.add('validation-status');
        event.target.after(validationStatus);
      }

      if (event.target.value === '') {
        onStop(event.target, validationStatus);
        return;
      }

      validationStatus.innerHTML = 'Validating<b>.</b><b>.</b><b>.</b>';

      // We have different ways of validating usernames for each of the servers
      if (server === 'kgs') {
        const url = `/api/kgs/${encodeURIComponent(username)}`;
        const options = {
          method: 'GET'
        };

        const response = await fetch(url, options);

        if (response.status === 200) {
          onValid(event.target, validationStatus);
        } else if (response.status === 404) {
          onInvalid(event.target, validationStatus);
        } else {
          onServiceUnavailable(event.target, validationStatus);
        }
      } else if (server === 'igs') {
        const url = `/api/pandanet/${encodeURIComponent(username)}`;
        const options = {
          method: 'GET'
        };

        const response = await fetch(url, options);
        
        if (response.status === 200) {
          onValid(event.target, validationStatus);
        } else if (response.status === 404) {
          onInvalid(event.target, validationStatus);
        } else {
          onServiceUnavailable(event.target, validationStatus);
        }

      } else if (server === 'ogs') {
        const url = `https://online-go.com/api/v1/players/?username=${username}`;
        const options = {
          method: 'GET'
        };

        const response = await fetch(url, options);
        const json = await response.json();

        if (json.count === 1) {
          onValid(event.target, validationStatus);
        } else if (json.count === 0) {
          onInvalid(event.target, validationStatus);
        } else {
          onServiceUnavailable(event.target, validationStatus);
        }

      }
    }
    
    // Keep all inputs asking for usernames for the same servers in sync with each other
    const updateOtherInputs = event => {
      const { 1: server } = event.target.name.match(serverRegex);
      const otherInputs = Array.from(usernameInputs)
        .filter(input => {
          const { 1: inputServer } = input.name.match(serverRegex);
          return inputServer === server && input !== event.target;
        });

      otherInputs.forEach(input => input.value = event.target.value)
    };

    // Select this tournament, if it's not already selected. Typing a username
    // indicates a desire to be part of it!
    const selectThisTournament = event => {
      const tournament = event.currentTarget.closest('.tournament-registration');
      const checkbox = tournament.querySelector('[type="checkbox"]');
      if (!checkbox.checked) {
        checkbox.checked = true;
      }
    }

    usernameInputs.forEach(usernameInput => {
      usernameInput.addEventListener('keyup', event => {
        selectThisTournament(event);
        updateOtherInputs(event);
      });

      // Make sure not to fire requests to validating servers to frequently
      usernameInput.addEventListener('keyup', debounce(validateUsername, 500));
    });
